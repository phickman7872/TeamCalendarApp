@{
    ViewData["Title"] = "Home Page";
}

<div id="mainBody">
    <label>Department:</label>
    <select id="ddlDepartments" class="form-control">
        <option value="0">-- All --</option>
    </select>
    <div class="row row-offcanvas row-offcanvas-right">
        <div id="calendar" class="col-12 col-md-9 main-content"></div>
        <div id="legend" class="col-6 col-md-3 sidebar-offcanvas">
            <ul class="list-group">
                <li class="list-group-item active">Legend</li>
            </ul>
        </div>
    </div>
</div>

<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><span id="eventTitle"></span></h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <button id="btnDelete" class="btn btn-danger btn-sm pull-right" data-toggle="confirmation">
                    <i class="fa fa-trash"></i>
                    Delete
                </button>
                <button id="btnEdit" class="btn btn-primary btn-sm pull-right" style="margin-right: 5px;">
                    <i class="fa fa-pencil"></i>
                    Edit
                </button>
                <p id="pDetails"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div id="myModalSave" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Save Event</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <form>
                    <input type="hidden" id="hdEventId" value="0" />
                    <div class="form-group">
                        <label for="ddlUser" id="lblUser">User</label>
                        <select class="form-control" id="ddlUser"></select>
                    </div>
                    <div class="form-group">
                        <label for="txtTitle">Title</label>
                        <div class="input-group">
                            <input class="form-control" type="text" id="txtTitle" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="ddlEventType">Event Type</label>
                        <select class="form-control" id="ddlEventType"></select>
                    </div>
                    <div class="form-group">
                        <label for="txtStart">Starts At</label>
                        <div class="input-group date" id="dtp1" data-target-input="nearest">
                            <input id="txtStart" type="text" class="form-control datetimepicker-input" data-target="#dtp1" />
                            <div class="input-group-append" data-target="#dtp1" data-toggle="datetimepicker">
                                <div class="input-group-text">
                                    <i class="fa fa-calendar"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="checkbox">
                            <label><input type="checkbox" id="chkIsFullDay" checked="checked" /> Is Full Day Event</label>
                        </div>
                    </div>
                    <div class="form-group" id="divEndDate" style="display: none;">
                        <label for="txtEnd">End</label>
                        <div class="input-group date" id="dtp2" data-target-input="nearest">
                            <input type="text" id="txtEnd" class="form-control datetimepicker-input" data-target="#dtp2" />
                            <div class="input-group-append" data-target="#dtp2" data-toggle="datetimepicker">
                                <div class="input-group-text">
                                    <i class="fa fa-calendar"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="txtDescription">Description</label>
                        <textarea id="txtDescription" rows="3" class="form-control"></textarea>
                    </div>
                    <button type="button" id="btnSave" class="btn btn-success">Save</button>
                    <button type="button" class="btn" data-dismiss="modal">Close</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            var events = [];
            var eventTypes = [];
            var selectedEvent = null;
            var username = '@User.Identity.Name.Split('\\')[1]';
            var loggedInUser = null;
            var departments = [];
            var users = [];

            fetchLoggedInUser();
            fetchEventsAndRenderCalendar();
            fetchEventTypes();
            fetchDepartments();

            function createLegend() {
                if (eventTypes) {
                    $.each(eventTypes, function (index, element) {
                        col = element.themeColor;

                        $('#legend ul').append('<li class="list-group-item" style="color: white; background-color: ' + element.themeColor + ';">' + element.name + '</li>');
                    })
                }
            }

            $('.popover-dismiss').popover({
                trigger: 'focus'
            });

            $(function () {
                $('[data-toggle="popover"]').popover()
            });

            $('[data-toggle=confirmation]').confirmation({
                rootSelector: '[data-toggle=confirmation]',
                onConfirm: function () {
                    if (selectedEvent !== null) {
                        $.ajax({
                            type: "DELETE",
                            url: "api/events/delete/" + selectedEvent.eventID,
                            success: function (status) {
                                if (status) {
                                    fetchEventsAndRenderCalendar();
                                    $('#myModal').modal('hide');
                                }
                            },
                            error: function () {
                                alert('Delete Failed');
                            }
                        })
                    }
                }
            });

            // Refresh the events by whatever department is currently
            // selected every 60 seconds.
            setInterval(function () {
                var id = $('#ddlDepartments option:selected').val();

                fetchEventsByDepartment(id);
            }, 60000);

            $('#ddlDepartments').change(function () {
                var id = $('#ddlDepartments option:selected').val();

                fetchEventsByDepartment(id);
            });

            function fetchLoggedInUser() {
                loggedInUser = null;

                $.ajax({
                    type: "GET",
                    url: "/api/users/@User.Identity.Name.Split('\\')[1]",
                    success: function (myData) {
                        if (myData) {
                            loggedInUser = myData;
                        }
                    },
                    error: function (err) {
                        alert(err);
                    }
                })
            }

            function fetchEventTypes() {
                eventTypes = [];

                $.ajax({
                    type: "GET",
                    url: "/api/eventtypes",
                    success: function (data) {
                        $.each(data, function (i, v) {
                            if (v.name !== 'Company Holiday') {
                                eventTypes.push({
                                    eventTypeId: v.eventTypeId,
                                    name: v.name,
                                    description: v.description,
                                    prefix: v.prefix,
                                    themeColor: v.themeColor
                                });
                            }
                        });

                        loadEventTypes(eventTypes);
                        createLegend();
                    }
                });
            }

            function fetchEventsByDepartment(id) {
                events = [];

                $.ajax({
                    type: "GET",
                    url: "/api/events/listbydepartment/" + id,
                    success: function (data) {
                        if (data) {
                            $.each(data, function (i, v) {
                                events.push({
                                    eventID: v.eventId,
                                    eventTypeId: v.eventTypeId,
                                    username: v.username,
                                    title: v.title,
                                    description: v.description,
                                    start: moment(v.startsAt),
                                    end: v.endsAt != null ? moment(v.endsAt) : null,
                                    allDay: v.isFullDay,
                                    color: v.themeColor
                                });
                            })
                        }

                        generateCalendar(events);
                    },
                    error: function (error) {
                        alert('failed');
                    }
                })
            }

            function fetchDepartments() {
                departments = [];

                $.ajax({
                    type: "GET",
                    url: "/api/departments",
                    success: function (data) {
                        if (data) {
                            $.each(data, function (i, v) {
                                departments.push({
                                    deparmentId: v.departmentId,
                                    name: v.name
                                });
                            });

                            loadDepartments(departments);
                        }
                    },
                    error: function (err) {
                        console.log(err);
                    }
                });
            }

            function fetchUsers(id) {
                users = [];

                $.ajax({
                    type: "GET",
                    url: "/api/users/listbydepartment/" + id,
                    success: function (data) {
                        if (data) {
                            $.each(data, function (i, v) {
                                users.push({
                                    userId: v.userId,
                                    departmentId: v.departmentId,
                                    username: v.username,
                                    firstName: v.firstName,
                                    lastName: v.lastName,
                                    emailAddress: v.emailAddress,
                                    isManager: v.isManager,
                                    isSiteManager: v.isSiteManager,
                                    reportsTo: v.reportsTo
                                });
                            });

                            loadUsers(users);
                        }
                    }
                });
            }

            function fetchEventsAndRenderCalendar() {
                events = [];

                $.ajax({
                    type: "GET",
                    url: "/api/events/",
                    success: function (data) {
                        if (data) {
                            $.each(data, function (i, v) {
                                events.push({
                                    eventID: v.eventId,
                                    eventTypeId: v.eventTypeId,
                                    username: v.username,
                                    title: v.title,
                                    description: v.description,
                                    start: moment(v.startsAt),
                                    end: v.endsAt != null ? moment(v.endsAt) : null,
                                    allDay: v.isFullDay,
                                    color: v.themeColor
                                });
                            })
                        }

                        generateCalendar(events);
                    },
                    error: function (error) {
                        alert('failed');
                    }
                })
            }

            function generateCalendar(events) {
                $('#calendar').fullCalendar('destroy');
                $('#calendar').fullCalendar({
                    defaultDate: new Date(),
                    timeFormat: 'h(:mm)a',
                    header: {
                        left: 'prev,next,today',
                        center: 'title',
                        right: 'month,basicWeek,basicDay,agenda'
                    },
                    eventLimit: true,
                    eventColor: 'green',
                    eventTextColor: 'white',
                    events: events,
                    eventClick: function (calEvent, jsEvent, view) {
                        selectedEvent = calEvent;

                        // Make sure the user has the ability to edit this record.
                        // If not, we need to disable the Edit/Remove buttons.
                        if (username !== selectedEvent.username && !loggedInUser.isManager) {
                            $('#myModal #btnDelete').prop('disabled', true);
                            $('#myModal #btnEdit').prop('disabled', true);
                        } else {
                            // Disable editing and deleting if this event
                            // is in the past and the user is not a manager.
                            var diffDays = dateDiff(new Date(), selectedEvent.start);

                            if (diffDays < 0 && !loggedInUser.isManager) {
                                $('#myModal #btnDelete').prop('disabled', true);
                                $('#myModal #btnEdit').prop('disabled', true);
                            } else {
                                $('#myModal #btnDelete').prop('disabled', false);
                                $('#myModal #btnEdit').prop('disabled', false);
                            }
                        }

                        $('#myModal #eventTitle').text(calEvent.title);

                        var $description = $('<div/>');
                        $description.append($('<p/>').html('<b>Title: </b>' + calEvent.title));
                        $description.append($('<p/>').html('<b>Start: </b>' + calEvent.start.format("MM/DD/YYYY HH:mm A")));
                        if (calEvent.end != null) {
                            $description.append($('<p/>').html('<b>End: </b>' + calEvent.end.format("MM/DD/YYYY HH:mm A")));
                        }
                        $description.append($('<p/>').html('<b>Description: </b>' + calEvent.description));

                        $('#myModal #pDetails').empty().html($description);
                        $('#myModal').modal();
                    },
                    selectable: true,
                    select: function (start, end) {
                        // Only managers should be able to create events that have
                        // occurred in the past.
                        if (dateDiff(new Date(), start) >= 0 || loggedInUser.isManager) {
                            selectedEvent = {
                                eventID: 0,
                                eventTypeId: 0,
                                username: '@User.Identity.Name.Split("\\")[1]',
                                title: '',
                                description: '',
                                start: start,
                                end: end,
                                allDay: false,
                                color: ''
                            };
                            openAddEditForm();
                        }

                        $('#calendar').fullCalendar('unselect');
                    },
                    editable: true,
                    eventDrop: function (event) {
                        var data = {
                            EventId: event.eventID,
                            EventTypeId: event.eventTypeId,
                            Username: event.username,
                            Title: event.title,
                            Description: event.description,
                            StartsAt: event.start.format('MM/DD/YYYY HH:mm A'),
                            EndsAt: event.end != null ? event.end.format('MM/DD/YYYY HH:mm A') : null,
                            ThemeColor: event.color,
                            IsFullDay: event.allDay
                        };

                        saveEvent(data);
                    },
                    contentHeight: 'auto',
                    displayEventTime: false,
                    eventRender: function (eventObj, $el) {
                        $el.popover({
                            title: eventObj.title,
                            content: eventObj.description,
                            trigger: 'hover',
                            placement: 'top',
                            container: 'body'
                        });
                    }
                })
            }

            $('#btnEdit').click(function () {
                openAddEditForm();
            });

            $('#dtp1, #dtp2').datetimepicker();

            $('#ddlEventType').html($('#ddlEventType option').sort((a, b) => {
                return a.text == b.text ? 0 : a.text < b.text ? -1 : 1
            }));

            $('#chkIsFullDay').change(function () {
                if ($(this).is(':checked')) {
                    $('#divEndDate').hide();
                } else {
                    $('#divEndDate').show();
                }
            });

            function openAddEditForm() {
                if (selectedEvent != null) {
                    $('#hdEventId').val(selectedEvent.eventID);
                    $('#txtTitle').val(selectedEvent.title);
                    $('#ddlEventType').val(selectedEvent.eventTypeId.toString());
                    $('#txtStart').val(selectedEvent.start.format('MM/DD/YYYY HH:mm A'));
                    $('#chkIsFullDay').prop("checked", selectedEvent.allDay || false);
                    $('#chkIsFullDay').change();
                    $('#txtEnd').val(selectedEvent.end != null ? selectedEvent.end.format('MM/DD/YYYY HH:mm A') : '');
                    $('#txtDescription').val(selectedEvent.description);
                }

                // If the user opening the form is a manager, then we must
                // show the User dropdown. We only show this is the user
                // is a manager.
                if (loggedInUser.isManager) {
                    fetchUsers(loggedInUser.departmentId);

                    $('#myModalSave #lblUser').show();
                    $('#myModalSave #ddlUser').show();
                } else {
                    $('#myModalSave #lblUser').hide();
                    $('#myModalSave #ddlUser').hide();
                }

                $('#myModal').modal('hide');
                $('#myModalSave').modal();
            }

            function dateDiff(date1, date2) {
                var d1 = moment(date1, 'MM/DD/YYYY');
                var d2 = moment(date2, 'MM/DD/YYYY');

                return d2.diff(d1, 'days');
            }

            $('#btnSave').click(function () {
                if ($('#txtStart').val().trim() == "") {
                    alert('Start date required!');
                    return;
                }

                if ($('#chkIsFullDay').is(':checked') == false && $('#txtEnd').val().trim() == "") {
                    alert('End date is required!');
                    return;
                } else {
                    var startDate = moment($('#txtStart').val(), "MM/DD/YYYY HH:mm A").toDate();
                    var endDate = moment($('#txtEnd').val(), "MM/DD/YYYY HH:mm A").toDate();

                    if (startDate > endDate) {
                        alert('Invalid end date!');
                        return;
                    }
                }

                // We need to determine who created/updated the event along with who the event
                // was made for.
                var user, userCreated;

                if (loggedInUser.isManager) {
                    user = $('#ddlUser').val().trim();
                    userCreated = '@User.Identity.Name.Split("\\")[1]';
                } else {
                    user = userCreated = '@User.Identity.Name.Split("\\")[1]';
                }

                var data = {
                    EventId: $('#hdEventId').val(),
                    EventTypeId: $('#ddlEventType').val().trim(),
                    Username: user,
                    Title: $('#txtTitle').val().trim(),
                    Description: $('#txtDescription').val(),
                    StartsAt: $('#txtStart').val().trim(),
                    EndsAt: $('#chkIsFullDay').is(':checked') ? null : $('#txtEnd').val().trim(),
                    ThemeColor: '',
                    IsFullDay: $('#chkIsFullDay').is(':checked'),
                    UserCreated: userCreated,
                    UserUpdated: userCreated
                }

                saveEvent(data);
            })

            function saveEvent(data) {
                $.ajax({
                    type: "POST",
                    url: '/api/events',
                    data: JSON.stringify(data),
                    dataType: 'json',
                    contentType: 'application/json',
                    success: function (status) {
                        if (status) {
                            fetchEventsAndRenderCalendar();
                            $('#myModalSave').modal('hide');
                        }
                    },
                    error: function () {
                        alert('Save Failed!');
                    }
                })
            }

            //-----------------------------------------------------------------
            // Loading methods
            //-----------------------------------------------------------------
            function loadUsers(users) {
                $.each(users, function (i, v) {
                    $('#ddlUser').append($("<option></option>").val(v.username).html(v.firstName + ' ' + v.lastName));
                });
            }

            function loadEventTypes(eventTypes) {
                $.each(eventTypes, function (i, v) {
                    $('#ddlEventType').append($("<option></option>").val(v.eventTypeId).html(v.name));
                });
            }

            function loadDepartments(departments) {
                $.each(departments, function (i, v) {
                    $('#ddlDepartments').append($("<option></option>").val(v.deparmentId).html(v.name));
                });
            }
        });
    </script>
}