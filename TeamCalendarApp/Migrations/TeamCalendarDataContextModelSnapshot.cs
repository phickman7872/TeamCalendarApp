// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamCalendarApp.Data;

namespace TeamCalendarApp.Migrations
{
    [DbContext(typeof(TeamCalendarDataContext))]
    partial class TeamCalendarDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TeamCalendarApp.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desription");

                    b.Property<DateTime?>("EndsAt");

                    b.Property<int>("EventTypeId");

                    b.Property<bool>("IsFullDay");

                    b.Property<DateTime>("StartsAt");

                    b.Property<string>("ThemeColor");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TeamCalendarApp.Models.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Prefix");

                    b.Property<string>("ThemeColor");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new { EventTypeId = 1, Description = "Vacation Day", Name = "Vacation", Prefix = "V", ThemeColor = "Green" },
                        new { EventTypeId = 2, Description = "1/2 Vacation Day", Name = "1/2 Vacation Day", Prefix = "1/2 V", ThemeColor = "Olive" },
                        new { EventTypeId = 3, Description = "Personal Holiday", Name = "Personal Holiday", Prefix = "P", ThemeColor = "Purple" },
                        new { EventTypeId = 4, Description = "Dr.'s Appointment", Name = "Dr.'s Appointment", Prefix = "D", ThemeColor = "Yellow" },
                        new { EventTypeId = 5, Description = "Company Holiday", Name = "Company Holiday", Prefix = "C", ThemeColor = "Silver" }
                    );
                });

            modelBuilder.Entity("TeamCalendarApp.Models.StatusItem", b =>
                {
                    b.Property<int>("StatusItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEntered");

                    b.Property<string>("Description");

                    b.Property<int>("StatusTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("StatusItemId");

                    b.ToTable("StatusItems");
                });

            modelBuilder.Entity("TeamCalendarApp.Models.StatusType", b =>
                {
                    b.Property<int>("StatusTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("StatusTypeId");

                    b.ToTable("StatusTypes");

                    b.HasData(
                        new { StatusTypeId = 1, Description = "This is an accomplishment.", Title = "Accomplishments" },
                        new { StatusTypeId = 2, Description = "This is an impediment.", Title = "Impediment" },
                        new { StatusTypeId = 3, Description = "This is an item that I am working on for the next two weeks.", Title = "Next Two Weeks" },
                        new { StatusTypeId = 4, Description = "This is a project I'm currently working on.", Title = "Current Projects" }
                    );
                });

            modelBuilder.Entity("TeamCalendarApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsManager");

                    b.Property<bool>("IsSiteManager");

                    b.Property<string>("LastName");

                    b.Property<int>("ReportsTo");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new { UserId = 1, EmailAddress = "RBuffington@attentigroup.com", FirstName = "Randy", IsManager = true, IsSiteManager = true, LastName = "Buffington", ReportsTo = 0, Username = "RBuffington" },
                        new { UserId = 2, EmailAddress = "DEllingsworth@attentigroup.com", FirstName = "Don", IsManager = true, IsSiteManager = false, LastName = "Ellingsworth", ReportsTo = 1, Username = "DEllingsworth" },
                        new { UserId = 3, EmailAddress = "JFonnotto@attentigroup.com", FirstName = "John", IsManager = true, IsSiteManager = false, LastName = "Fonnotto", ReportsTo = 1, Username = "JFonnotto" },
                        new { UserId = 4, EmailAddress = "JNelson@attentigroup.com", FirstName = "Jeremy", IsManager = false, IsSiteManager = false, LastName = "Nelson", ReportsTo = 2, Username = "JNelson" },
                        new { UserId = 5, EmailAddress = "FBorcan@attentigroup.com", FirstName = "Fulviu", IsManager = false, IsSiteManager = false, LastName = "Borcan", ReportsTo = 3, Username = "FBorcan" },
                        new { UserId = 6, EmailAddress = "SCupstid@attentigroup.com", FirstName = "Scott", IsManager = false, IsSiteManager = false, LastName = "Cupstid", ReportsTo = 2, Username = "SCupstid" },
                        new { UserId = 7, EmailAddress = "MLocklear@attentigroup.com", FirstName = "Marita", IsManager = false, IsSiteManager = false, LastName = "Locklear", ReportsTo = 2, Username = "MLocklear" },
                        new { UserId = 8, EmailAddress = "PHickman@attentigroup.com", FirstName = "Phil", IsManager = false, IsSiteManager = false, LastName = "Hickman", ReportsTo = 3, Username = "PHickman" },
                        new { UserId = 9, EmailAddress = "GUkarande@attentigroup.com", FirstName = "Girish", IsManager = false, IsSiteManager = false, LastName = "Ukarande", ReportsTo = 2, Username = "GUkarande" },
                        new { UserId = 10, EmailAddress = "CGibson@attentigroup.com", FirstName = "Carla", IsManager = false, IsSiteManager = false, LastName = "Gibson", ReportsTo = 3, Username = "CGibson" },
                        new { UserId = 11, EmailAddress = "DBoyd@attentigroup.com", FirstName = "David", IsManager = false, IsSiteManager = false, LastName = "Boyd", ReportsTo = 3, Username = "DBoyd" },
                        new { UserId = 12, EmailAddress = "SManess@attentigroup.com", FirstName = "Shannon", IsManager = false, IsSiteManager = false, LastName = "Maness", ReportsTo = 2, Username = "SManess" }
                    );
                });
#pragma warning restore 612, 618
        }
    }
}
